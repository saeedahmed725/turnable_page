import 'dart:developer';
import 'dart:ui' as ui;

import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';

import '../enums/flip_corner.dart';
import '../flip/flip_settings.dart';
import '../page/page_flip.dart';
import '../render/render.dart';
import 'page_flip_controller.dart';
import 'turnable_page_view.dart';

typedef TurnableBuilder =
    Widget Function(int pageIndex, BoxConstraints constraints);

typedef TurnablePageCallback =
    void Function(int leftPageIndex, int rightPageIndex);

class TurnablePage extends StatelessWidget {
  /// Optional controller for programmatic control
  final PageFlipController? controller;

  /// Custom page builder function for widget content
  final TurnableBuilder pageBuilder;

  /// Total number of pages
  final int pageCount;

  /// Callback when page changes
  final TurnablePageCallback? onPageChanged;

  /// Page flip settings configuration
  final FlipSetting settings;

  /// Aspect ratio for individual pages (width/height ratio)
  /// Default: 2/3 ≈ 0.667 for single page (6" × 9") and 3/4 ≈ 0.75 for two-page spread (8.5" × 11")
  /// Adjust based on your design requirements
  final double aspectRatio;

  /// Pixel ratio for high-quality rendering
  final double pixelRatio;

  /// Create a PageFlipWidget in portrait mode (single page view)
  const TurnablePage.singlePage({
    super.key,
    this.controller,
    required this.pageBuilder,
    required this.pageCount,
    this.onPageChanged,
    this.aspectRatio = 2 / 3,
    this.pixelRatio = 1.0,
    this.autoResponse = true,
    FlipSetting? settings,
  }) : settings = const FlipSetting(usePortrait: true);

  /// Create a PageFlipWidget in landscape mode (two-page spread view)
  const TurnablePage.twoPages({
    super.key,
    this.controller,
    required this.pageBuilder,
    required this.pageCount,
    this.onPageChanged,
    this.aspectRatio = 2 / 3,
    this.pixelRatio = 1.0,
    FlipSetting? settings,
  })  :
        autoResponse=false,
        settings = const FlipSetting(usePortrait: false);

  final bool autoResponse;

  Size calculateBookSize({
    required double maxWidth,
    required double maxHeight,
    required double aspectRatio,
  })
  {
    final effectiveAspectRatio = settings.usePortrait
        ? aspectRatio
        : aspectRatio * 2;

    double width = maxWidth;
    double height = width / effectiveAspectRatio;

    if (height > maxHeight) {
      height = maxHeight;
      width = height * effectiveAspectRatio;
    }

    return Size(width, height);
  }


  @override
  Widget build(BuildContext context) {

    return LayoutBuilder(
      builder: (context, constraints) {
        print("constraints: $constraints");
        final isMobile = constraints.maxWidth < 600;
        final aspectRatio = isMobile ? 2 / 3 : 3 / 4;

       final bookSize = calculateBookSize(
          maxWidth: constraints.maxWidth * 0.95, // لتقليل الحجم قليلاً
          maxHeight: constraints.maxHeight * 0.95,
          aspectRatio: aspectRatio,
        );

        return TurnablePageView.twoPages(
          pageBuilder: pageBuilder,
          bookSize: bookSize,
          settings: settings,
          pageCount: pageCount,
          pixelRatio: pixelRatio,
          controller: controller,
          aspectRatio: aspectRatio,
          onPageChanged: onPageChanged,
        );
      },
    );
  }
}

